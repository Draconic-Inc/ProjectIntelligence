/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.brandon3055.projectintelligence.client.gui.swing;

import com.brandon3055.brandonscore.utils.Utils;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author brandon3055
 */
public class SelectIcon extends javax.swing.JDialog {

    public boolean canceled = false;
    private Map<String, List<String>> typeSelectionMap;

    /**
     * Creates new form SelectContent
     */
    public SelectIcon(java.awt.Frame parent, String message, Map<String, List<String>> typeSelectionMap, String initialType, String initialContent) {
        super(parent, true);
        this.typeSelectionMap = typeSelectionMap;
        initComponents();
        messageField.setText(message);
        pack();
        typeSelectionMap.keySet().forEach(s -> typeSelect.addItem(s));
        typeSelect.setSelectedItem(initialType);
        contentField.setText(initialContent);
        updateSelection();

        int centerX = parent.getX() + (parent.getWidth() / 2);
        int centerY = parent.getY() + (parent.getHeight() / 2);
        setLocation(centerX - (getWidth() / 2), Math.max(0, centerY - (getHeight() / 2)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        messageField = new JTextArea();
        jLabel1 = new JLabel();
        typeSelect = new JComboBox<>();
        contentField = new JTextField();
        jLabel2 = new JLabel();
        selectItem = new JButton();
        jButton1 = new JButton();
        jButton2 = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Item");

        messageField.setEditable(false);
        messageField.setColumns(20);
        messageField.setLineWrap(true);
        messageField.setRows(5);
        messageField.setWrapStyleWord(true);

        jLabel1.setText("Content Type:");

        typeSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                typeSelectActionPerformed(evt);
            }
        });
        typeSelect.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                contentChange(evt);
            }
        });

        contentField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                contentFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Content String:");

        selectItem.setText("Select Item From Inventory");
        selectItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                selectItem(evt);
            }
        });

        jButton1.setText("Cancel");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancel(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ok(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(messageField)
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(typeSelect, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel1))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel2)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addComponent(contentField)))
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectItem, GroupLayout.PREFERRED_SIZE, 399, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(messageField, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(typeSelect, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(contentField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(selectItem)
                                .addComponent(jButton1)
                                .addComponent(jButton2))
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void typeSelectActionPerformed(ActionEvent evt) {
        updateSelection();
    }

    private void contentFieldActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void selectItem(ActionEvent evt) {
        Map<String, String> selectionMap = new HashMap<>();
        for (String item : typeSelectionMap.get(getIconType())) {
            selectionMap.put(Utils.trimString(item, 128, "..."), item);
        }

        String item = (String) JOptionPane.showInputDialog(this, "Select an item from the list", "Select", JOptionPane.PLAIN_MESSAGE, null, selectionMap.keySet().toArray(), "");
        if (item == null) {
            return;
        }
        contentField.setText(selectionMap.get(item));
    }

    private void cancel(ActionEvent evt) {
        canceled = true;
        dispose();
    }

    private void ok(ActionEvent evt) {
        dispose();
    }

    private void contentChange(PropertyChangeEvent evt) {

    }

    public void updateSelection() {
        String type = getIconType();
        selectItem.setEnabled(true);
        if (type.equals("stack") && typeSelectionMap.get(type).size() > 0) {
            selectItem.setText("Select stack from inventory");
        }
        else if (type.equals("entity") && typeSelectionMap.get(type).size() > 0) {
            selectItem.setText("Select entity from spawn egg registry");
        }
        else if (typeSelectionMap.get(type).size() > 0) {
            selectItem.setText("Select from avalible");
        }
        else {
            selectItem.setText(" ");
            selectItem.setEnabled(false);
        }

    }

    public String getIconType() {
        return (String) typeSelect.getSelectedItem();
    }

    public String getIconString() {
        return contentField.getText();
    }

    // Variables declaration - do not modify                     
    private JTextField contentField;
    private JButton jButton1;
    private JButton jButton2;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JTextArea messageField;
    private JButton selectItem;
    private JComboBox<String> typeSelect;
    // End of variables declaration                   
}
